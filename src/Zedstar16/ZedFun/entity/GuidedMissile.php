<?php


namespace Zedstar16\ZedFun\entity;


use pocketmine\entity\Entity;
use pocketmine\entity\projectile\Arrow;
use pocketmine\event\entity\EntityDamageEvent;
use pocketmine\level\Level;
use pocketmine\level\particle\FlameParticle;
use pocketmine\math\RayTraceResult;
use pocketmine\math\Vector3;
use pocketmine\nbt\tag\CompoundTag;
use pocketmine\Player;
use Zedstar16\ZedFun\ZedFun;

class GuidedMissile extends Arrow
{
    public $gravity = 0;
    public $shootingentity;
    protected $target;

    public function __construct(Level $level, CompoundTag $nbt, Entity $shootingEntity = null, Player $target)
    {
        $this->target = $target;
        $this->shootingentity = $shootingEntity;
        parent::__construct($level, $nbt, $shootingEntity, false);
        $this->setOwningEntity($shootingEntity);
    }




    public function onHitEntity(Entity $entityHit, RayTraceResult $hitResult): void
    {
        $entityHit->attack(new EntityDamageEvent($entityHit, EntityDamageEvent::CAUSE_PROJECTILE, 20));
        parent::onHitEntity($entityHit, $hitResult); // TODO: Change the autogenerated stub
    }

/*
    public function onCollideWithPlayer(Player $player): void
    {
        if($player !== $this->shootingentity) {
            $player->attack(new EntityDamageEvent($player, EntityDamageEvent::CAUSE_PROJECTILE, 10));
            $this->flagForDespawn();
        }
      //  $this->close();
    }*/

    public function getName(): string
    {
        return "GuidedMissile";
    }

    /**
     * @param int $tickDiff
     * @return bool
     */

    public function entityBaseTick(int $tickDiff = 1): bool
    {
        if ($this->closed) {
            $this->flagForDespawn();
            return false;
        }
        $this->getLevel()->addParticle(new FlameParticle($this->asVector3()));
        $this->setMotion(ZedFun::getTargetVector($this, $this->target->asVector3()->add(0, $this->target->getEyeHeight()))->multiply(2));
        $hasUpdate = parent::entityBaseTick($tickDiff);
        return $hasUpdate;
    }

}